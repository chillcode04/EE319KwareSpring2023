// Lab5.c starter program EE319K Lab 5, Spring 2023
// Runs on TM4C123
// Put your names here

// 2/5/2023 version


/*  
   Option A6, connect LEDs to PB5-PB0, switches to PE3-1, walk LED PF321	 
*/
// east/west red light connected to bit 5
// east/west yellow light connected to bit 4
// east/west green light connected to bit 3
// north/south facing red light connected to bit 2
// north/south facing yellow light connected to bit 1
// north/south facing green light connected to bit 0
// pedestrian detector connected to most significant bit (1=pedestrian present)
// north/south car detector connected to middle bit (1=car present)
// east/west car detector connected to least significant bit (1=car present)
// "walk" light connected to PF3-1 (built-in white LED)
// "don't walk" light connected to PF3-1 (built-in red LED)
#include <stdint.h>
#include "Lab5grader.h"
#include "../inc/tm4c123gh6pm.h"
// put both EIDs in the next two lines
char EID1[] = "huy123"; //  ;replace abc123 with your EID
char EID2[] = "thanh13"; //  ;replace abc123 with your EID

void DisableInterrupts(void);
void EnableInterrupts(void);

void Wait10ms(uint32_t time);// implemented in delay.s

#define NVIC_ST_CTRL_R      (*((volatile uint32_t *)0xE000E010))
#define NVIC_ST_RELOAD_R    (*((volatile uint32_t *)0xE000E014))
#define NVIC_ST_CURRENT_R   (*((volatile uint32_t *)0xE000E018))

void Pll_Init(void){
  // 0) Use RCC2
  SYSCTL_RCC2_R |=  0x80000000;  // USERCC2
  // 1) bypass PLL while initializing
  SYSCTL_RCC2_R |=  0x00000800;  // BYPASS2, PLL bypass
  // 2) select the crystal value and oscillator source
  SYSCTL_RCC_R = (SYSCTL_RCC_R &~0x000007C0)   // clear XTAL field, bits 10-6
                 + 0x00000540;   // 10101, configure for 16 MHz crystal
  SYSCTL_RCC2_R &= ~0x00000070;  // configure for main oscillator source
  // 3) activate PLL by clearing PWRDN
  SYSCTL_RCC2_R &= ~0x00002000;
  // 4) set the desired system divider
  SYSCTL_RCC2_R |= 0x40000000;   // use 400 MHz PLL
  SYSCTL_RCC2_R = (SYSCTL_RCC2_R&~ 0x1FC00000)  // clear system clock divider
                  + (4<<22);      // configure for 80 MHz clock
  // 5) wait for the PLL to lock by polling PLLLRIS
  while((SYSCTL_RIS_R&0x00000040)==0){};  // wait for PLLRIS bit
  // 6) enable use of PLL by clearing BYPASS
  SYSCTL_RCC2_R &= ~0x00000800;
}

void SysTick_Init(void){
  NVIC_ST_CTRL_R = 0;               // disable SysTick during setup
  NVIC_ST_CTRL_R = 0x00000005;      // enable SysTick with core clock
}
// The delay parameter is in units of the 80 MHz core clock. (12.5 ns)
void SysTick_Wait(uint32_t delay){
  NVIC_ST_RELOAD_R = delay-1;  // number of counts to wait
  NVIC_ST_CURRENT_R = 0;       // any value written to CURRENT clears
  while((NVIC_ST_CTRL_R&0x00010000)==0){ // wait for count flag
  }
}

#define T10s 800000000
#define T05s 40000000
#define T5s  400000000
void FSM_Init(void){ volatile uint32_t delay;
  Pll_Init();       // 80 MHz
  SysTick_Init();   // Program 5.2
  SYSCTL_RCGCGPIO_R |= 0x32;   // enable clock B E F
  delay = SYSCTL_RCGCGPIO_R;   // wait for clock
	
  GPIO_PORTE_DIR_R &= ~0x0E;   // inputs on PE1-3
  GPIO_PORTE_DEN_R |= 0x0E;    // enable digital on PE1-3
	
  GPIO_PORTB_DIR_R |= 0x3F;    // outputs on PB0-5
  GPIO_PORTB_DEN_R |= 0x3F;    // enable digital on PB0-5
  GPIO_PORTB_DATA_R = 0;       // deactivate
	
	GPIO_PORTF_DIR_R |= 0x0E;    // outputs on PF1-3
  GPIO_PORTF_DEN_R |= 0x0E;    // enable digital on PF1-3
  GPIO_PORTF_DATA_R = 0;       // deactivate
}

uint32_t Switch_Input(void){
  return (GPIO_PORTE_DATA_R & 0x0E) >> 1 ;  // check input 0,1,2,3...7
}
void Walk(void)
{
	GPIO_PORTF_DATA_R = 0x08	; // set light white PF3 
	GPIO_PORTB_DATA_R = 0x24; // set red west, red south 0010 0100	
}
void Warning(void)
{
	GPIO_PORTF_DATA_R = 0x02; // on red off white
	SysTick_Wait(T05s);
	GPIO_PORTF_DATA_R &= ~0x02;
	SysTick_Wait(T05s);	
	GPIO_PORTF_DATA_R = 0x02;	
	SysTick_Wait(T05s);
	GPIO_PORTF_DATA_R &= ~0x02;
	SysTick_Wait(T05s);	
	GPIO_PORTF_DATA_R = 0x02;	
}
void Go_w(void)
{
	GPIO_PORTF_DATA_R = 0x02;
	GPIO_PORTB_DATA_R = 0x0C; // 0000 1100
}

void Go_s(void)
{
	GPIO_PORTF_DATA_R = 0x02;
	GPIO_PORTB_DATA_R = 0x21; // 0010 0001
}

void Wait_w(void)
{
	GPIO_PORTF_DATA_R = 0x02;
	GPIO_PORTB_DATA_R = 0x14; // 0001 0100
}

void Wait_s(void)
{
	GPIO_PORTF_DATA_R = 0x02;
	GPIO_PORTB_DATA_R = 0x22; // 0010 0010
}

void Stop_all(void)
{
	GPIO_PORTF_DATA_R = 0x02; // white red
	GPIO_PORTB_DATA_R = 0x24;	// both red
}

struct State 
{
	void (*CmdPt) (void);
	uint32_t Time;
	uint32_t Next[8];
};
typedef struct State State_t;
#define walk 0
#define warning 1
#define go_w 2
#define wait_w 3
#define stop_all1 4
#define stop_all2 5
#define go_s 6
#define wait_s 7
#define stop_all3 8
#define wait_walk 9
State_t FSM[9] = {
	{&Walk, T5s, 		{walk, warning, warning, warning, walk, warning, warning, warning}},
	{&Warning, T05s, 	{stop_all1, go_w, go_s, go_s, stop_all1, go_w, go_s, go_s}},
	{&Go_w, T5s, 		{go_w, go_w, wait_w, wait_w, wait_w, wait_w, wait_w, wait_w}},
	{&Wait_w, T05s,     {wait_w, stop_all2, stop_all2, stop_all2, stop_all1, stop_all1, stop_all2, stop_all1}},
	{&Stop_all, T05s,   {walk, walk, walk, walk, walk, walk, walk, walk}},
	{&Stop_all, T05s,   {stop_all2, go_w, go_s, go_s, walk, go_w, go_s, go_s}},
	{&Go_s, T5s,        {go_s, wait_s, go_s, wait_s, wait_s, wait_s, wait_s, wait_s}},
	{&Wait_s, T05s,     {wait_s, stop_all3, stop_all3, stop_all3, stop_all3, stop_all3, stop_all3, stop_all3}},
	{&Stop_all, T05s,   {stop_all3, go_w, go_s, go_w, walk, go_w, go_w, go_w}},
};

uint32_t S;
uint32_t Input;
int main(void){ 
	TExaS_Init(GRADER);
	
//  DisableInterrupts();
  TExaS_Init(NONE);
  // Initialize GPIO ports
  // Specify initial atate
//  EnableInterrupts(); // grader, scope, logic analyzer need interrupts

	FSM_Init();
	SysTick_Wait(T10s);
	S = stop_all2;
  while(1){
		(FSM[S].CmdPt) ();
		SysTick_Wait(FSM[S].Time);
		Input = Switch_Input();
		S = FSM[S].Next[Input];	
  }
}
